plugins {
    id "java"
    id "scala"
    id "maven-publish"
    id 'fabric-loom' version "1.7-SNAPSHOT"
    id "com.github.ben-manes.versions" version "0.21.0"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

version = mod_version
def ENV = System.getenv()
version = version + "+scala." + project.scala_version + (ENV.GITHUB_ACTIONS ? "" : ".local")

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //These are the deps included with the scala adapter, if you think you have a good dep that would be a nice fit please open an issue.
    shadow "org.scala-lang:scala-library:${project.scala_version}"
    shadow "org.scala-lang:scala-reflect:${project.scala_version}"
    shadow "org.scala-lang:scala-compiler:${project.scala_version}"
	shadow "org.scala-lang.modules:scala-java8-compat_2.12:1.0.0"

    testImplementation "org.scala-lang:scala-library:${project.scala_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
}

build.dependsOn shadowJar

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-language-scala/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion