plugins {
    id "java-library"
    id "scala"
    id "maven-publish"
    id 'fabric-loom' version '1.7-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

version = mod_version
def ENV = System.getenv()
version = version + "+scala." + project.scala_version + (ENV.GITHUB_ACTIONS ? "" : ".local")

repositories {
    maven {
		url 'https://maven.aliyun.com/repository/central'
	}
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include(api("org.scala-lang:scala3-library_3:${project.scala_version}"))
	// Depended on by scala3
	include(api("org.scala-lang:scala-library:2.13.14"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
			from components.java
        }
    }
    repositories {
		repositories {
			if (ENV.MAVEN_URL) {
				maven {
					url ENV.MAVEN_URL
					credentials {
						username ENV.MAVEN_USERNAME
						password ENV.MAVEN_PASSWORD
					}
				}
			}
		}
    }
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URI("https://maven.fabricmc.net/net/fabricmc/fabric-language-scala/maven-metadata.xml").toURL().text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
